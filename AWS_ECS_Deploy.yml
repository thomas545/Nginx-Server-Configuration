# IAM Permissions: (SecretsManagerReadWrite, AWSCodeDeployRoleForECS, AWSCodeDeployRole, AWSCodeDeployRoleForECSLimited, 
# AmazonECS_FullAccess, AmazonECSTaskExecutionRolePolicy, AWSDeviceFarmFullAccess, EC2InstanceProfileForImageBuilderECRContainerBuilds, 
# AWSAppRunnerServicePolicyForECRAccess, AWSElasticBeanstalkRoleECS)

# AWS_ACCESS_KEY_ID: access key for IAM
# AWS_SECRET_ACCESS_KEY: access secret for IAM
# ECR_REGISTRY_URL: ECR Image URL (exp: xxxxx.dkr.ecr.eu-west-1.amazonaws.com:production)
# ECR_REGISTRY_NAME: ECR Repo name (exp: doctor_website)
# ECR_TAG: ECR TAG like latest or anything else (exp: production)


name: CI/CD
on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY_URL }}
        ECR_REPOSITORY: ${{ secrets.ECR_REGISTRY_NAME }}
        IMAGE_TAG: ${{ secrets.ECR_TAG }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: scripts/task-definition.json
        container-name: Container-name
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: service-name
        cluster: Cluster-name
        wait-for-service-stability: true
